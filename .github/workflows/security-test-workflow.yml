name: Security Test Workflow
# This workflow is triggered on pull requests and pushes to main or an OpenSearch release branch
on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - "*"

jobs:
  build:
    strategy:
      matrix:
        java: [ 11, 17 ]
    # Job name
    name: Build and test SecurityAnalytics
    # This job runs on Linux
    runs-on: ubuntu-latest
    steps:
      # This step uses the setup-java Github action: https://github.com/actions/setup-java
      - name: Set Up JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      # This step uses the checkout Github action: https://github.com/actions/checkout
      - name: Checkout Branch
        uses: actions/checkout@v2
      # This step uses the setup-java Github action: https://github.com/actions/setup-java
      - name: Set Up JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Build SecurityAnalytics
        # Only assembling since the full build is governed by other workflows
        run: ./gradlew assemble

      - name: Clone Alerting
        run: |
          git clone https://github.com/opensearch-project/alerting/

      - name: Build Alerting
        # Only assembling since the full build is governed by other workflows
        run: cd alerting && ./gradlew assemble

      - name: Pull and Run Docker
        run: |
          alerting_plugin=`basename $(ls alerting/alerting/build/distributions/*.zip)`
          alerting_list_of_files=`ls alerting/`
          alerting_list_of_all_files=`ls alerting/alerting/build/distributions/`
          alerting_version=`echo $alerting_plugin|awk -F- '{print $3}'| cut -d. -f 1-3`
          alerting_plugin_version=`echo $alerting_plugin|awk -F- '{print $3}'| cut -d. -f 1-4`
          alerting_qualifier=`echo $alerting_plugin|awk -F- '{print $4}'| cut -d. -f 1-1`
          alerting_candidate_version=`echo $alerting_plugin|awk -F- '{print $5}'| cut -d. -f 1-1`
          
          plugin=`basename $(ls build/distributions/*.zip)`
          list_of_files=`ls`
          list_of_all_files=`ls build/distributions/`
          version=`echo $plugin|awk -F- '{print $3}'| cut -d. -f 1-3`
          plugin_version=`echo $plugin|awk -F- '{print $3}'| cut -d. -f 1-4`
          qualifier=`echo $plugin|awk -F- '{print $4}'| cut -d. -f 1-1`
          candidate_version=`echo $plugin|awk -F- '{print $5}'| cut -d. -f 1-1`
          docker_version=$version-$qualifier

          [[ -z $candidate_version ]] && candidate_version=$qualifier && qualifier=""

          echo plugin version plugin_version qualifier candidate_version docker_version
          echo "($plugin) ($version) ($plugin_version) ($qualifier) ($candidate_version) ($docker_version)"
          echo $ls $list_of_all_files

          if docker pull opensearchstaging/opensearch:$docker_version
          then
                docker build -t opensearch-alerting-security-analytics:$docker_version \
                   --build-arg DOCKER_VERSION_ARG="$docker_version" \
                   --build-arg PLUGIN_ARG="$plugin_version" \
                   --build-arg ALERTING_PLUGIN_ARG="$alerting_plugin_version" \
                   -f ci/Dockerfile .
            echo "imagePresent=true" >> $GITHUB_ENV
          else
            echo "imagePresent=false" >> $GITHUB_ENV
          fi

      - name: Run Docker Image
        if: env.imagePresent == 'true'
        run: |
          cd ..
          docker run -p 9200:9200 -d -p 9600:9600 -e "discovery.type=single-node" opensearch-alerting-security-analytics:$docker_version
          sleep 120

      - name: Run SecurityAnalytics Test for security enabled test cases
        if: env.imagePresent == 'true'
        run: |
          cluster_running=`curl -XGET https://localhost:9200/_cat/plugins -u admin:admin --insecure`
          echo $cluster_running
          security=`curl -XGET https://localhost:9200/_cat/plugins -u admin:admin --insecure |grep opensearch-security|wc -l`
          echo $security
          if [ $security -gt 0 ]
          then
            echo "Security plugin is available"
            ./gradlew :alerting:integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=docker-cluster -Dsecurity=true -Dhttps=true -Duser=admin -Dpassword=admin
          else
            echo "Security plugin is NOT available skipping this run as tests without security have already been run"
          fi
